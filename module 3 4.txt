- module3:
// host a static website with amazon s3
// the bucket is protected by bucket policy


amazon simple storage service (s3): object storage service, can store large amounts of data. 99.999..(11 9s), create messages (event notifications)
//event-driven solutions

use case:
+ content storage & distribution
+ backup & restore, archive
+ data lake, big data
+ disaster recovery
+ static website hosting

amazon s3 components:
+ bucket: a container storing object, namespace at highest level, each bucket is regional.
+ object: a fundamental entity, is any kinds of data
+ key: uniquely identifies the object in a bucket
// bucket url: region specific endpoint + region name
// object stored in Aws region never leave the region
// object url: region specific endpoint + bucket name + object_key (is the file name)
---
- create a bucket:
+ unique name, use lowercase letter, number, hyphen
+ name cannot change
+ specify the region, region cannot change

- access bucket: bucket URLs
- reference object via virtual-host-style URLs.
https://<bucket-name>.s3-website-<region>.amazonaws.com

https://frank-martha-cafe.s3-website-us-east-1.amazonaws.com

- creating folder structure in bucket: using refixes
---
Part 1: Working with S3 objects
object:
+ object data
+ object metadata (key+value pairs)

- 2 types of metadata: system-defined, user-defined

- load object to s3 bucket: put
< 5gb = single upload
> 5gb = multipart upload

- package boto3



- Secure Sockets Layer/Transport Layer Security (SSL/TLS) at transit.
- SSE-S3, SSE-C, and SSE-KMS—are focused on server-side encryption for data at rest
---
Upload & download file (object) to & from bucket.
Select object (retrieve required information of an object from bucket without download entire object)
Object versioning (save, recover versions of an object (in the same bucket) whenever it is modified, each version has an id).
// versioning is disabled by default. But after u enable, u can only suspend it (cannot disable)

- nếu k bật versioning: thì khi xóa object thì hệ thống xóa nó vĩnh viễn
- nếu bật versioning:
+ nếu chỉ chỉ định key: hệ thống k xóa các version mà chỉ thêm 1 deleted marker vào object.
+ nếu chỉ địng thêm id: hệ thống sẽ xóa chính xác version có id đó, k ảnh hưởng các phiên bản khác.

---
Protecting data and managing access to Amazon S3 resource

- in transit: use SSL (secure socket layer) or TLS (transport layer security)
- at rest: client-side encryption, server-side 
encryption (sse-s3, sse-kms, sse-c)


1. Identity-based Policy (Chính sách dựa trên danh tính)
-Đây là các chính sách được liên kết trực tiếp với người dùng, nhóm, hoặc vai trò trong IAM (Identity and Access Management).
-Mục tiêu: Kiểm soát quyền truy cập tài nguyên AWS dựa trên danh tính của người dùng.
2. Resource-based Policy (Chính sách dựa trên tài nguyên)
-Được liên kết trực tiếp với các tài nguyên AWS, như bucket hoặc object.
-Mục tiêu: Kiểm soát ai (IAM users, roles, hoặc accounts) có thể truy cập vào tài nguyên cụ thể.
3. Access Control List (ACL)
-ACL giúp quản lý quyền truy cập chi tiết ở mức object hoặc bucket.
-Mục tiêu: Kiểm soát quyền truy cập theo từng tài khoản AWS cụ thể.
4. Bucket Policy
-Là dạng cụ thể của resource-based policy áp dụng ở mức bucket.
-Mục tiêu: Cấu hình quyền truy cập toàn diện cho tất cả các object trong một bucket.
5. Presigned URLs
-Là liên kết tạm thời để cung cấp quyền truy cập vào object trong S3 mà không cần IAM quyền.
-Mục tiêu: Cho phép người dùng tải lên hoặc tải xuống object thông qua một URL bảo mật.
6. Cross-Origin Resource Sharing (CORS)
-CORS cho phép tài nguyên của một bucket được truy cập từ một domain khác.
-Mục tiêu: Hỗ trợ hosting website khi các object được tham chiếu từ nhiều nguồn.

----------------------------------------------

Module 4: Securing Access to Cloud Resources

- aws: security of the cloud
- customer: security in the cloud

AWS Identity and Access Management (IAM)
•Securely controls individual and group access to your AWS resources
•Integrates with other AWS services
•Supports federated identity management
•Supports granular permissions
•Supports multi-factor authentication (MFA)

Security fundamentals 
authentication: who can use
authorization: what resources they can use and in what ways

IAM overview:
creating users, groups, and roles. You can also enforce access control by attaching policies.
-> best practice is to attach IAM policies to IAM groups, and then assign IAM users to these IAM groups

Section 4: Authenticating with IAM
AWS account authentication -> application authentication -> 
resource authentication -> database authentication

IAM credentials for authentication:
- Two primary types of credentials:
+ console: user name and password.
+ AWS CLI, SDKs, APIs: WS access key (ccess key ID and a secret access key)

Multi-factor authentication (MFA):
- factors: sth you know, such as a password; sth you have, such as a cryptographic token; or sth you are, such as your fingerprint
- can also enforce MFA by adding MFA restrictions to IAM policies.
- Enable MFA for:
•AWS Management Console users
•AWS API users (requires temporary security credentials)

IAM roles provide temporary credentials:
- IAM role characteristics:
•Provides temporary security credentials
•Is not uniquely associated with one person
•Is assumable by a person, application, or service
•Is often used to delegate access
- Common use cases:
•Application that runs on Amazon Elastic Compute Cloud (Amazon EC2)
•Cross-account access for an IAM user
•Mobile applications

Section 5: Authorizing with IAM

Policies and permissions:
- IAM policies that grant or deny permissions.
- By default, an authenticated IAM user, group, or role can't access anything in your account until you grant them permissions
- An IAM policy is a JSON document.

Identity-based and resource-based policies:
- Identity-based policies are attached to an IAM user, group, or role.
- Resource-based policies are attached to a resource.

Comparing managed and inline IAM policies:
- Managed policies are standalone, identity-based policies that you can attach to multiple users, groups, and roles:
+ AWS-managed policies: managed by AWS
+ Customer-managed policies: managed by you.
- Inline policies: are embedded in a principal entity such as a user, group, or role.

Evaluation logic for IAM policies:

Principle of least privilege:
- Best practices:
•Start by granting the minimum AWS account permissions that are needed for the job role
•Grant additional access as needed.






















